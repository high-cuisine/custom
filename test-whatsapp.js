const { 
  useMultiFileAuthState, 
  makeWASocket, 
  DisconnectReason 
} = require('@whiskeysockets/baileys');
const qrcode = require('qrcode-terminal');
const fs = require('fs');
const path = require('path');

const authFolder = './whatsapp_session';

async function connectToWhatsApp() {
  const { state, saveCreds } = await useMultiFileAuthState(authFolder);

  const sock = makeWASocket({
    printQRInTerminal: true,
    auth: state,
  });

  sock.ev.on('connection.update', (update) => {
    const { connection, lastDisconnect, qr } = update;

    if (qr) {
      qrcode.generate(qr, { small: true });
      console.log('üîê –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WhatsApp');
    }

    if (connection === 'open') {
      console.log('‚úÖ WhatsApp –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', sock.user);
      sendTestMessage(sock);
    }

    if (connection === 'close') {
      const shouldReconnect = (lastDisconnect?.error)?.output?.statusCode !== DisconnectReason.loggedOut;
      if (shouldReconnect) {
        console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        setTimeout(() => connectToWhatsApp(), 5000);
      }
    }
  });

  sock.ev.on('creds.update', saveCreds);
}

async function sendTestMessage(sock) {
  const testNumber = '79123456789@c.us'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
  try {
    await sock.sendMessage(testNumber, { text: '–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üöÄ' });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err);
  }
}

async function sendCustomMessage(sock, phoneNumber, message) {
  try {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    let formattedPhone = phoneNumber.replace(/\D/g, '');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!formattedPhone.startsWith('7') && !formattedPhone.startsWith('8')) {
      formattedPhone = '7' + formattedPhone;
    }
    
    // –ó–∞–º–µ–Ω—è–µ–º 8 –Ω–∞ 7
    if (formattedPhone.startsWith('8')) {
      formattedPhone = '7' + formattedPhone.substring(1);
    }
    
    const whatsappNumber = formattedPhone + '@c.us';
    
    await sock.sendMessage(whatsappNumber, { text: message });
    console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –Ω–æ–º–µ—Ä ${phoneNumber}`);
    return true;
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ ${phoneNumber}:`, err);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
async function sendMessageFromArgs() {
  const args = process.argv.slice(2);
  if (args.length < 2) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-whatsapp.js <–Ω–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞> <—Å–æ–æ–±—â–µ–Ω–∏–µ>');
    console.log('–ü—Ä–∏–º–µ—Ä: node test-whatsapp.js 79123456789 "–ü—Ä–∏–≤–µ—Ç!"');
    return;
  }

  const phoneNumber = args[0];
  const message = args[1];

  console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ ${phoneNumber}: ${message}`);

  const { state, saveCreds } = await useMultiFileAuthState(authFolder);
  
  const sock = makeWASocket({
    printQRInTerminal: false,
    auth: state,
  });

  sock.ev.on('connection.update', async (update) => {
    const { connection } = update;

    if (connection === 'open') {
      console.log('‚úÖ WhatsApp –ø–æ–¥–∫–ª—é—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ...');
      const success = await sendCustomMessage(sock, phoneNumber, message);
      if (success) {
        process.exit(0);
      } else {
        process.exit(1);
      }
    }
  });

  sock.ev.on('creds.update', saveCreds);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if (process.argv.length > 2) {
  sendMessageFromArgs();
} else {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ WhatsApp –∫–ª–∏–µ–Ω—Ç–∞...');
  connectToWhatsApp();
} 