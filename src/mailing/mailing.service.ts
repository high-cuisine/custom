import { Injectable } from '@nestjs/common';
import { PrismaService } from 'libs/prisma/Prisma.service';
import { TelegramService } from 'src/telegram/telegram.service';
import { WhatsappService } from 'src/whatsapp/whatsapp.service';

@Injectable()
export class MailingService {

    constructor(
        private readonly prisma: PrismaService, 
        private readonly telegramService: TelegramService,
        private readonly whatsappService: WhatsappService
    ) {}
    
    async startMessageTelegram(clients: any, messages: string[]) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è - —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ —Å 9:00 –¥–æ 21:00
        if (!this.isWithinWorkingHours()) {
            const nextWorkingTime = this.getNextWorkingTime();
            const now = new Date();
            const currentTime = now.toLocaleTimeString('ru-RU', { 
                hour: '2-digit', 
                minute: '2-digit',
                timeZone: 'Europe/Moscow'
            });
            console.log(`‚è∞ Telegram —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentTime}. –°–ª–µ–¥—É—é—â–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: ${nextWorkingTime}. –ñ–¥–µ–º...`);
            
            // –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            await this.waitUntilWorkingHours();
        }

        await this.sendMessageTelegram(messages, clients);
    }

    private async sendMessageTelegram(messages: string[], clients: any[]) {
        const randomMessage = messages[Math.floor(Math.random() * messages.length)];
        const userbots = await this.prisma.telegramsUserbots.findMany({
            where: {
                isBan: false,
            },
        });

        if (userbots.length === 0) {
            console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Telegram –±–æ—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
            return;
        }

        let userbotCounter = 0;
        let successCount = 0;
        let errorCount = 0;

        for (const client of clients) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                if (!this.isWithinWorkingHours()) {
                    const nextWorkingTime = this.getNextWorkingTime();
                    console.log(`‚è∞ Telegram —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ ${nextWorkingTime}. –ñ–¥–µ–º...`);
                    await this.waitUntilWorkingHours();
                }

                if (userbotCounter >= userbots.length) {
                    userbotCounter = 0; // –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ—Ç–æ–≤
                }

                console.log(`üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É ${client.phone} —á–µ—Ä–µ–∑ –±–æ—Ç–∞ ${userbotCounter + 1}`);
                
                await this.telegramService.sendMessage(
                    userbots[userbotCounter].session, 
                    randomMessage, 
                    client.phone
                );
                
                console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${client.phone}`);
                successCount++;
                
                userbotCounter++;
                await new Promise(resolve => setTimeout(resolve, this.getDelay())); 
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ${client.phone}:`, error.message);
                errorCount++;
                
                // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ—Ç–∞
                userbotCounter++;
                if (userbotCounter >= userbots.length) {
                    userbotCounter = 0;
                }
                
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—è —Ü–∏–∫–ª
                continue;
            }
        }
        
        console.log(`üìä Telegram —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`);
    }

    async startMessageWhatsapp(messages: string[], clients: any[]) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è - —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ —Å 9:00 –¥–æ 21:00
        if (!this.isWithinWorkingHours()) {
            const nextWorkingTime = this.getNextWorkingTime();
            const now = new Date();
            const currentTime = now.toLocaleTimeString('ru-RU', { 
                hour: '2-digit', 
                minute: '2-digit',
                timeZone: 'Europe/Moscow'
            });
            console.log(`‚è∞ WhatsApp —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentTime}. –°–ª–µ–¥—É—é—â–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: ${nextWorkingTime}. –ñ–¥–µ–º...`);
            
            // –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            await this.waitUntilWorkingHours();
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö WhatsApp —Å–µ—Å—Å–∏–π –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞—Å—Å—ã–ª–∫–∏
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ WhatsApp —Å–µ—Å—Å–∏–π...');
        await this.whatsappService.healthCheckAllSessions();

        const userbots = await this.prisma.whatsappUserbots.findMany({
            where: {
                isBan: false,
            },
        });

        if(userbots.length === 0) {
            console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö WhatsApp –±–æ—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
            return;
        }

        console.log(`üì± –ù–∞–π–¥–µ–Ω–æ ${userbots.length} WhatsApp –±–æ—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏`);

        let userbotCounter = 0;
        let successCount = 0;
        let errorCount = 0;

        for(const client of clients) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                if (!this.isWithinWorkingHours()) {
                    const nextWorkingTime = this.getNextWorkingTime();
                    console.log(`‚è∞ WhatsApp —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ ${nextWorkingTime}. –ñ–¥–µ–º...`);
                    await this.waitUntilWorkingHours();
                }

                if (userbotCounter >= userbots.length) {
                    userbotCounter = 0; // –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ—Ç–æ–≤
                }

                const currentUserbot = userbots[userbotCounter];
                console.log(`üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É ${client.phone} —á–µ—Ä–µ–∑ WhatsApp –±–æ—Ç–∞ ${userbotCounter + 1} (—Å–µ—Å—Å–∏—è: ${currentUserbot.session})`);
                
                await this.sendMessageWhatsapp(currentUserbot, messages, client);
                console.log(`‚úÖ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${client.phone}`);
                successCount++;
                
                userbotCounter++;
                await new Promise(resolve => setTimeout(resolve, this.getDelay())); // –ó–∞–¥–µ—Ä–∂–∫–∞ 20 —Å–µ–∫—É–Ω–¥
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ${client.phone}:`, error.message);
                errorCount++;
                
                // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ—Ç–∞
                userbotCounter++;
                if (userbotCounter >= userbots.length) {
                    userbotCounter = 0;
                }
                
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—è —Ü–∏–∫–ª
                continue;
            }
        }
        
        console.log(`üìä WhatsApp —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`);
    }

    private async sendMessageWhatsapp(userbot: any, messages: string[], client: any) {
        const randomMessage = messages[Math.floor(Math.random() * messages.length)];
        
        try {
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ: "${randomMessage}" –∫–ª–∏–µ–Ω—Ç—É ${client.phone} —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é ${userbot.session}`);
            
            const result = await this.whatsappService.sendMessage(
                userbot.session, // ID —Å–µ—Å—Å–∏–∏
                randomMessage, 
                client.phone
            );
            
            if (result) {
                console.log(`‚úÖ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${client.phone}`);
            } else {
                console.log(`‚ö†Ô∏è WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${client.phone} - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
            }
            
        } catch (error) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            const isConnectionError = this.isWhatsAppConnectionError(error);
            
            if (isConnectionError) {
                console.error(`üîå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è WhatsApp –¥–ª—è —Å–µ—Å—Å–∏–∏ ${userbot.session}: ${error.message}`);
                console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ ${userbot.session}...`);
                
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ—Å—Å–∏—é
                try {
                    await this.whatsappService.healthCheckAllSessions();
                    console.log(`‚úÖ –°–µ—Å—Å–∏—è ${userbot.session} –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∞`);
                } catch (reconnectError) {
                    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ—Å—Å–∏—é ${userbot.session}:`, reconnectError.message);
                }
            } else {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ${client.phone}:`, error.message);
            }
            
            // –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–ª–∞—Å—å
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º WhatsApp
     */
    private isWhatsAppConnectionError(error: any): boolean {
        if (!error) return false;
        
        const errorMessage = error.message?.toLowerCase() || '';
        const errorOutput = error.output || {};
        const statusCode = errorOutput.statusCode;
        
        // –û—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è WhatsApp
        if (errorMessage.includes('connection closed') || 
            errorMessage.includes('connection lost') ||
            errorMessage.includes('socket closed') ||
            errorMessage.includes('disconnected') ||
            errorMessage.includes('precondition required') ||
            errorMessage.includes('timed out') ||
            errorMessage.includes('timeout')) {
            return true;
        }
        
        // HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ã, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
        if (statusCode === 428 || // Precondition Required
            statusCode === 408 || // Request Timeout
            statusCode === 503 || // Service Unavailable
            statusCode === 502 || // Bad Gateway
            statusCode === 504) { // Gateway Timeout
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Baileys
        if (error.isBoom && error.output?.payload?.message?.includes('Connection Closed')) {
            return true;
        }
        
        return false;
    }

    private getDelay() {
        const delayMinutes = Math.floor(Math.random() * 28) + 3;
        return delayMinutes * 60 * 1000; 
    }

    private isWithinWorkingHours(): boolean {
        const now = new Date();
        const currentHour = now.getHours();
        return currentHour >= 9 && currentHour < 21;
    }

    private getNextWorkingTime(): string {
        const now = new Date();
        const currentHour = now.getHours();
        const currentMinute = now.getMinutes();

        if (currentHour >= 21) {
            return '09:00';
        }

        let nextHour = currentHour + 1;
        let nextMinute = currentMinute;

        if (nextHour >= 21) {
            nextHour = 9;
        }

        return `${nextHour.toString().padStart(2, '0')}:${nextMinute.toString().padStart(2, '0')}`;
    }

    private async waitUntilWorkingHours(): Promise<void> {
        const now = new Date();
        const currentHour = now.getHours();
        const currentMinute = now.getMinutes();

        if (currentHour >= 21) {
            await new Promise(resolve => setTimeout(resolve, (9 * 60 * 60 * 1000) - (now.getTime() % (24 * 60 * 60 * 1000))));
        } else {
            const targetTime = new Date(now);
            targetTime.setHours(9, 0, 0, 0);
            const timeDiff = targetTime.getTime() - now.getTime();
            if (timeDiff < 0) {
                targetTime.setDate(targetTime.getDate() + 1);
            }
            await new Promise(resolve => setTimeout(resolve, timeDiff));
        }
    }
}
