import { Injectable } from '@nestjs/common';
import { Ctx, Scene, SceneEnter, Hears, On } from 'nestjs-telegraf';
import { Markup } from 'telegraf';
import { SceneContext } from 'telegraf/typings/scenes';
import { TelegramService } from '../../telegram/telegram.service';

interface TelegramLoginSession {
  step: 'phone_input' | 'code_input' | 'password_input' | 'confirmation';
  phoneNumber?: string;
  code?: string;
  password?: string;
  phoneCodeHash?: string;
  user?: any;
}

@Injectable()
@Scene('telegram_login')
export class TelegramCreateBotScene {
  constructor(private readonly telegramService: TelegramService) {}

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: SceneContext) {
    if (!ctx.session['telegramLogin']) {
      ctx.session['telegramLogin'] = {} as TelegramLoginSession;
    }
    
    const session = ctx.session['telegramLogin'] as TelegramLoginSession;
    session.step = 'phone_input';
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Ü–µ–Ω—ã
    if (ctx.scene.session && (ctx.scene.session as any).user) {
      session.user = (ctx.scene.session as any).user;
    }
    
    await ctx.reply(`
üîê <b>–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç Telegram</b>

–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç Telegram –Ω—É–∂–Ω–æ:
1. –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
2. –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ SMS/Telegram
3. –í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥

<b>–®–∞–≥ 1: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>
<i>–ü—Ä–∏–º–µ—Ä: +79123456789</i>`,
      Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_telegram_login')]
      ])
    );
  }

  @On('text')
  async onText(@Ctx() ctx: SceneContext) {
    if((ctx.message as any)?.text === '/start') {
      await ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ –≤—Ö–æ–¥–∞ –≤ Telegram');
      await ctx.scene.leave();
      return;
    }

    const session = ctx.session['telegramLogin'] as TelegramLoginSession;
    const text = (ctx.message as any).text;

    if (
      text.toLowerCase().includes('–æ—Ç–º–µ–Ω–∞') ||
      text.toLowerCase().includes('cancel')
    ) {
      await ctx.reply('–í—Ö–æ–¥ –≤ Telegram –æ—Ç–º–µ–Ω–µ–Ω');
      await this.cleanupSession(ctx);
      await ctx.scene.leave();
      return;
    }

    switch (session.step) {
      case 'phone_input':
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if (this.isValidPhoneNumber(text)) {
          session.phoneNumber = text;
          session.step = 'code_input';
          
          try {
            console.log('üîê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞:', session.phoneNumber);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ TelegramService –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
            const result = await this.telegramService.sendCode(session.phoneNumber);
            console.log('‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:', result);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º phone_code_hash –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
            if (result && result.phone_code_hash) {
              session.phoneCodeHash = result.phone_code_hash;
              console.log('üì± Phone code hash —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', result.phone_code_hash);
            }
            
            await ctx.reply(
              '‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç!\n\n' +
              'üì± –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram/SMS\n\n' +
              '<b>–®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b>',
              Markup.inlineKeyboard([
                [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_telegram_login')]
              ])
            );
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞:', error);
            await ctx.reply(
              `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: ${error.message}\n\n` +
              '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
              '‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n' +
              '‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å API Telegram\n' +
              '‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫\n\n' +
              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.'
            );
            session.step = 'phone_input';
          }
        } else {
          await ctx.reply(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n' +
            '–ü—Ä–∏–º–µ—Ä: +79123456789, +380123456789, +1234567890'
          );
        }
        break;

      case 'code_input':
        if (text.length >= 4 && text.length <= 6 && /^\d+$/.test(text)) {
          session.code = text;
          
          try {
            console.log('üîê –í—Ö–æ–¥–∏–º —Å –∫–æ–¥–æ–º:', session.code);
            console.log('üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', session.phoneNumber);
            console.log('üîë Phone code hash:', session.phoneCodeHash);
            
            if (session.phoneNumber && session.code && session.phoneCodeHash) {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ TelegramService –¥–ª—è –≤—Ö–æ–¥–∞
              const signInResult = await this.telegramService.signIn({
                code: session.code,
                phone: session.phoneNumber,
                phone_code_hash: session.phoneCodeHash
              });
              
              console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', signInResult);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
              if (signInResult && signInResult.user) {
                console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', signInResult.user);
                session.step = 'confirmation';
                await this.completeLogin(ctx, session, signInResult);
              } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å 2FA
                session.step = 'password_input';
                await ctx.reply(
                  '‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç!\n\n' +
                  'üîê <b>–®–∞–≥ 3: –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b>\n\n' +
                  '<i>–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ 2FA, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"</i>',
                  Markup.inlineKeyboard([
                    [Markup.button.callback('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip_password')],
                    [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_telegram_login')]
                  ])
                );
              }
            } else {
              throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞');
            }
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
            
            if (error.message.includes('SESSION_PASSWORD_NEEDED')) {
              session.step = 'password_input';
              await ctx.reply(
                '‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç!\n\n' +
                'üîê <b>–®–∞–≥ 3: –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b>',
                Markup.inlineKeyboard([
                  [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_telegram_login')]
                ])
              );
            } else if (error.message.includes('PHONE_CODE_INVALID')) {
              await ctx.reply(
                '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n' +
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
              );
              session.step = 'code_input';
            } else if (error.message.includes('PHONE_CODE_EXPIRED')) {
              await ctx.reply(
                '‚ùå –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫\n\n' +
                '–ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
              );
              session.step = 'phone_input';
            } else {
              await ctx.reply(
                `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: ${error.message}\n\n` +
                '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
                '‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n' +
                '‚Ä¢ –ö–æ–¥ –∏—Å—Ç–µ–∫\n' +
                '‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å API Telegram\n\n' +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.'
              );
              session.step = 'code_input';
            }
          }
        } else {
          await ctx.reply(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ 4-6 —Ü–∏—Ñ—Ä.'
          );
        }
        break;

      case 'password_input':
        if (text === 'skip' || text.toLowerCase().includes('–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–æ–ª—å
          await this.completeLogin(ctx, session);
        } else {
          session.password = text;
          console.log('üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å 2FA –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          
          try {
            // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ–∂–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è
            console.log('‚úÖ –ü–∞—Ä–æ–ª—å 2FA –ø—Ä–∏–Ω—è—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)');
            await this.completeLogin(ctx, session);
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è:', error);
            await ctx.reply(
              `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è: ${error.message}\n\n` +
              '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
            );
          }
        }
        break;
    }
  }

  @On('callback_query')
  async onCallbackQuery(@Ctx() ctx: SceneContext) {
    const callbackData = (ctx.callbackQuery as any).data;

    if (callbackData === 'cancel_telegram_login') {
      await ctx.reply('–í—Ö–æ–¥ –≤ Telegram –æ—Ç–º–µ–Ω–µ–Ω');
      await this.cleanupSession(ctx);
      await ctx.scene.leave();
      return;
    }

    if (callbackData === 'skip_password') {
      const session = ctx.session['telegramLogin'] as TelegramLoginSession;
      session.step = 'confirmation';
      await this.completeLogin(ctx, session);
    }
  }

  private async completeLogin(ctx: SceneContext, session: TelegramLoginSession, signInResult?: any) {
    try {
      console.log('üéâ –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Ö–æ–¥ –≤ Telegram');
      console.log('üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', session.phoneNumber);
      console.log('üîë –ö–æ–¥:', session.code);
      console.log('üîê Phone code hash:', session.phoneCodeHash);
      
      if (signInResult) {
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞:', signInResult);
        
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if (signInResult.user) {
          console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
            id: signInResult.user.id,
            firstName: signInResult.user.firstName,
            lastName: signInResult.user.lastName,
            username: signInResult.user.username,
            phone: signInResult.user.phone
          });
        }
        
        // –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (signInResult.sessionString) {
          console.log('üîë –°—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏:', signInResult.sessionString);
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –∏–∑ TelegramService –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
      try {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –∏–∑ TelegramService
        const sessionString = this.telegramService.getSessionString();
        console.log('üîë –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏:', sessionString);
        
        if (sessionString) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
          const savedSession = await this.telegramService.saveTelegramSession(sessionString);
          console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É —Å ID:', savedSession.id);
          
          await ctx.reply(
            '‚úÖ <b>–í—Ö–æ–¥ –≤ Telegram —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n' +
            `üì± –ù–æ–º–µ—Ä: ${session.phoneNumber}\n` +
            `üÜî ID —Å–µ—Å—Å–∏–∏ –≤ –ë–î: ${savedSession.id}\n` +
            '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫.',
            Markup.inlineKeyboard([
              [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'start')]
            ])
          );
        } else {
          console.log('‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞');
          await ctx.reply(
            '‚úÖ <b>–í—Ö–æ–¥ –≤ Telegram –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n' +
            `üì± –ù–æ–º–µ—Ä: ${session.phoneNumber}\n` +
            '‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.',
            Markup.inlineKeyboard([
              [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
            ])
          );
        }
      } catch (saveError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –≤ –ë–î:', saveError);
        await ctx.reply(
          '‚úÖ <b>–í—Ö–æ–¥ –≤ Telegram –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n' +
          `üì± –ù–æ–º–µ—Ä: ${session.phoneNumber}\n` +
          '‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.',
          Markup.inlineKeyboard([
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'start')]
          ])
        );
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Ö–æ–¥–∞:', error);
      await ctx.reply(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Ö–æ–¥–∞: ${error.message}\n\n` +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      );
    } finally {
      await this.cleanupSession(ctx);
      await ctx.scene.leave();
    }
  }

  private async cleanupSession(ctx: SceneContext) {
    console.log('üßπ –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –≤—Ö–æ–¥–∞ –≤ Telegram');
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    delete ctx.session['telegramLogin'];
  }

  private isValidPhoneNumber(phone: string): boolean {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneRegex = /^\+[1-9]\d{1,14}$/;
    return phoneRegex.test(phone) && phone.length >= 10 && phone.length <= 15;
  }

  @Hears('/start')
  async onStart(@Ctx() ctx: SceneContext) {
    await ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ –≤—Ö–æ–¥–∞ –≤ Telegram');
    await this.cleanupSession(ctx);
    await ctx.scene.leave();
  }
}
