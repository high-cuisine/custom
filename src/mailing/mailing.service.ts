import { Injectable } from '@nestjs/common';
import { PrismaService } from 'libs/prisma/Prisma.service';
import { TelegramService } from 'src/telegram/telegram.service';
import { WhatsappService } from 'src/whatsapp/whatsapp.service';

@Injectable()
export class MailingService {

    constructor(
        private readonly prisma: PrismaService, 
        private readonly telegramService: TelegramService,
        private readonly whatsappService: WhatsappService
    ) {}
    
    async startMessageTelegram(clients: any, messages: string[]) {
       await this.sendMessageTelegram(messages, clients);
    }

    private async sendMessageTelegram(messages: string[], clients: any[]) {
        const randomMessage = messages[Math.floor(Math.random() * messages.length)];
        const userbots = await this.prisma.telegramsUserbots.findMany({
            where: {
                isBan: false,
            },
        });

        if (userbots.length === 0) {
            console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Telegram –±–æ—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
            return;
        }

        let userbotCounter = 0;
        let successCount = 0;
        let errorCount = 0;

        for (const client of clients) {
            try {
                if (userbotCounter >= userbots.length) {
                    userbotCounter = 0; // –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ—Ç–æ–≤
                }

                console.log(`üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É ${client.phone} —á–µ—Ä–µ–∑ –±–æ—Ç–∞ ${userbotCounter + 1}`);
                
                await this.telegramService.sendMessage(
                    userbots[userbotCounter].session, 
                    randomMessage, 
                    client.phone
                );
                
                console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${client.phone}`);
                successCount++;
                
                userbotCounter++;
                await new Promise(resolve => setTimeout(resolve, 1000 * 20)); // –ó–∞–¥–µ—Ä–∂–∫–∞ 20 —Å–µ–∫—É–Ω–¥
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ${client.phone}:`, error.message);
                errorCount++;
                
                // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ—Ç–∞
                userbotCounter++;
                if (userbotCounter >= userbots.length) {
                    userbotCounter = 0;
                }
                
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—è —Ü–∏–∫–ª
                continue;
            }
        }
        
        console.log(`üìä Telegram —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`);
    }

    async startMessageWhatsapp(messages: string[], clients: any[]) {
        const userbots = await this.prisma.whatsappUserbots.findMany({
            where: {
                isBan: false,
            },
        });

        if(userbots.length === 0) {
            console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö WhatsApp –±–æ—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
            return;
        }

        console.log(`üì± –ù–∞–π–¥–µ–Ω–æ ${userbots.length} WhatsApp –±–æ—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏`);

        let userbotCounter = 0;
        let successCount = 0;
        let errorCount = 0;

        for(const client of clients) {
            try {
                if (userbotCounter >= userbots.length) {
                    userbotCounter = 0; // –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ—Ç–æ–≤
                }

                const currentUserbot = userbots[userbotCounter];
                console.log(`üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É ${client.phone} —á–µ—Ä–µ–∑ WhatsApp –±–æ—Ç–∞ ${userbotCounter + 1} (—Å–µ—Å—Å–∏—è: ${currentUserbot.session})`);
                
                await this.sendMessageWhatsapp(currentUserbot, messages, client);
                console.log(`‚úÖ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${client.phone}`);
                successCount++;
                
                userbotCounter++;
                await new Promise(resolve => setTimeout(resolve, 1000 * 20)); // –ó–∞–¥–µ—Ä–∂–∫–∞ 20 —Å–µ–∫—É–Ω–¥
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ${client.phone}:`, error.message);
                errorCount++;
                
                // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ—Ç–∞
                userbotCounter++;
                if (userbotCounter >= userbots.length) {
                    userbotCounter = 0;
                }
                
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—è —Ü–∏–∫–ª
                continue;
            }
        }
        
        console.log(`üìä WhatsApp —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`);
    }

    private async sendMessageWhatsapp(userbot: any, messages: string[], client: any) {
        const randomMessage = messages[Math.floor(Math.random() * messages.length)];
        
        try {
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ: "${randomMessage}" –∫–ª–∏–µ–Ω—Ç—É ${client.phone} —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é ${userbot.session}`);
            
            const result = await this.whatsappService.sendMessage(
                userbot.session, // ID —Å–µ—Å—Å–∏–∏
                randomMessage, 
                client.phone
            );
            
            if (result) {
                console.log(`‚úÖ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${client.phone}`);
            } else {
                console.log(`‚ö†Ô∏è WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${client.phone} - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
            }
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ${client.phone}:`, error.message);
            // –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–ª–∞—Å—å
        }
    }
}
