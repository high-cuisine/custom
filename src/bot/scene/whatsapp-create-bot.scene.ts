import { Injectable } from '@nestjs/common';
import { Ctx, Scene, SceneEnter, Hears, On } from 'nestjs-telegraf';
import { Markup } from 'telegraf';
import { SceneContext } from 'telegraf/typings/scenes';
import { WhatsappService } from 'src/whatsapp/whatsapp.service';

interface WhatsappBotSession {
  step: 'phone_input' | 'message_input' | 'confirmation';
  phoneNumber?: string;
  message?: string;
  user?: any;
}

@Injectable()
@Scene('whatsapp_create_bot')
export class WhatsappCreateBotScene {
  constructor(private readonly whatsappService: WhatsappService) {}

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: SceneContext) {
    if (!ctx.session['whatsappBot']) {
      ctx.session['whatsappBot'] = {} as WhatsappBotSession;
    }
    
    const session = ctx.session['whatsappBot'] as WhatsappBotSession;
    session.step = 'phone_input';
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Ü–µ–Ω—ã
    if (ctx.scene.session && (ctx.scene.session as any).user) {
      session.user = (ctx.scene.session as any).user;
    }
    
    await ctx.reply(`
ü§ñ <b>–°–æ–∑–¥–∞–Ω–∏–µ WhatsApp –±–æ—Ç–∞</b>

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è WhatsApp –±–æ—Ç–∞ –Ω—É–∂–Ω–æ:
1. –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79XXXXXXXXX
2. –í–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ

<b>–®–∞–≥ 1: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è WhatsApp:</b>`,
      Markup.inlineKeyboard([
        [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_whatsapp_bot')]
      ])
    );
  }

  @On('text')
  async onText(@Ctx() ctx: SceneContext) {
    console.log('onText');

    if((ctx.message as any)?.text === '/start') {
      await ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ —Å–æ–∑–¥–∞–Ω–∏—è WhatsApp –±–æ—Ç–∞');
      await ctx.scene.leave();
      return;
    }

    const session = ctx.session['whatsappBot'] as WhatsappBotSession;
    const text = (ctx.message as any).text;

    if (
      text.toLowerCase().includes('–æ—Ç–º–µ–Ω–∞') ||
      text.toLowerCase().includes('cancel')
    ) {
      await ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ WhatsApp –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      await ctx.scene.leave();
      return;
    }

    switch (session.step) {
      case 'phone_input':
        if (text.startsWith('+7') && text.length === 12) {
          session.phoneNumber = text;
          session.step = 'message_input';
          await ctx.reply(
            '‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç!\n\n' +
              '<b>–®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>',
            Markup.inlineKeyboard([
              [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_whatsapp_bot')],
            ]),
          );
        } else {
          await ctx.reply(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +79XXXXXXXXX',
          );
        }
        break;

      case 'message_input':
        session.message = text;
        session.step = 'confirmation';
        await ctx.reply(
          `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n` +
            `<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ WhatsApp –±–æ—Ç–∞:</b>\n\n` +
            `üì± –ù–æ–º–µ—Ä: ${session.phoneNumber}\n` +
            `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${session.message}\n\n` +
            `–í—Å—ë –≤–µ—Ä–Ω–æ?`,
          Markup.inlineKeyboard([
            [
              Markup.button.callback('‚úÖ –°–æ–∑–¥–∞—Ç—å', 'confirm_whatsapp_bot'),
              Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_whatsapp_bot'),
            ],
          ]),
        );
        break;
    }
  }

  @On('callback_query')
  async onCallbackQuery(@Ctx() ctx: SceneContext) {
    const callbackData = (ctx.callbackQuery as any).data;

    if (callbackData === 'cancel_whatsapp_bot') {
      await ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ WhatsApp –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      await ctx.scene.leave();
      return;
    }

    if (callbackData === 'confirm_whatsapp_bot') {
      const session = ctx.session['whatsappBot'] as WhatsappBotSession;

      if (session.phoneNumber && session.message) {
        await ctx.reply('üîÑ –°–æ–∑–¥–∞—é WhatsApp –±–æ—Ç–∞...');

        try {
          await this.whatsappService.sendMessageWithQR(session.phoneNumber, session.message, ctx);
          //–≤—ã–≤–µ–¥–∏ —Å–µ—Å—Å–∏—é –≤–∞—Ç—Å–∞–ø–ø –≤ –∫–æ–Ω—Å–æ–ª—å
          await ctx.reply('‚úÖ WhatsApp –±–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!');
          await ctx.reply('–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫.');
        } catch (error) {
          await ctx.reply(
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ WhatsApp –±–æ—Ç–∞: ${error.message}`,
          );
          await ctx.reply('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
        }

        await ctx.scene.leave();
      } else {
        await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞');
        await ctx.scene.leave();
      }
    }
  }

  @Hears('/start')
  async onStart(@Ctx() ctx: SceneContext) {
    await ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ —Å–æ–∑–¥–∞–Ω–∏—è WhatsApp –±–æ—Ç–∞');
    await ctx.scene.leave();
    await ctx.reply('/start');
  }
}
