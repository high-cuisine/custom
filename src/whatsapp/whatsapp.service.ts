import { Injectable, Logger, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import {
  makeWASocket,
  useMultiFileAuthState,
  DisconnectReason,
  makeCacheableSignalKeyStore,
  WASocket,
  proto,
} from '@whiskeysockets/baileys';
import * as qrcode from 'qrcode';
import * as fs from 'fs';
import * as path from 'path';
import { tmpdir } from 'os';
import { randomUUID } from 'crypto';
import { SceneContext } from 'telegraf/typings/scenes';
import { PrismaService } from 'libs/prisma/Prisma.service';

interface WhatsAppSession {
  id: number;
  session: string;
  phone: string;
  isBan: boolean;
  dailyCount: number;
}

@Injectable()
export class WhatsappService implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(WhatsappService.name);
  private sessions: Map<string, WASocket> = new Map();
  private sessionStates: Map<string, any> = new Map();
  private authFolders: Map<string, string> = new Map();

  constructor(private readonly prisma: PrismaService) {}

  async onModuleInit() {
    this.logger.log('WhatsApp Service initialized');
    // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Å—Å–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    // await this.loadExistingSessions();
  }

  async onModuleDestroy() {
    this.logger.log('WhatsApp Service shutting down');
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for (const [sessionId, sock] of this.sessions) {
      try {
        await sock.logout();
      } catch (error) {
        this.logger.error(`Error logging out session ${sessionId}:`, error);
      }
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  private async loadExistingSessions() {
    try {
      const sessions = await this.prisma.whatsappUserbots.findMany({
        where: { isBan: false }
      });

      for (const session of sessions) {
        // session.session —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –ø–∞–ø–∫–∏ —Å–µ—Å—Å–∏–∏
        await this.connectSession(session.session, session.phone);
      }
    } catch (error) {
      this.logger.error('Error loading existing sessions:', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é WhatsApp
   */
  async createNewSession(phone: string): Promise<{ qrCode: string; sessionId: string }> {
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–∞–ø–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const sessionFolderName = `whatsapp_${phone.replace(/\D/g, '')}_${Date.now()}`;
    const authFolder = path.join(process.cwd(), 'whatsapp_sessions', sessionFolderName);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Å—Å–∏–∏
    if (!fs.existsSync(authFolder)) {
      fs.mkdirSync(authFolder, { recursive: true });
    }

    this.authFolders.set(sessionFolderName, authFolder);
    
    try {
      const { state, saveCreds } = await useMultiFileAuthState(authFolder);
      this.sessionStates.set(sessionFolderName, { state, saveCreds });

      const sock = makeWASocket({
        printQRInTerminal: false,
        auth: state
      });

      this.sessions.set(sessionFolderName, sock);

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      sock.ev.on('connection.update', async (update) => {
        const { connection, lastDisconnect, qr } = update;

        if (qr) {
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
          const qrCode = await qrcode.toDataURL(qr);
          this.logger.log(`QR code generated for session ${sessionFolderName}`);
        }

        if (connection === 'open') {
          this.logger.log(`WhatsApp session ${sessionFolderName} connected successfully`);
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
          await this.saveWhatsappSession(sessionFolderName, phone);
        }

        if (connection === 'close') {
          const shouldReconnect = (lastDisconnect?.error as any)?.output?.statusCode !== DisconnectReason.loggedOut;
          if (shouldReconnect) {
            this.logger.log(`Reconnecting session ${sessionFolderName}...`);
            setTimeout(() => this.connectSession(sessionFolderName, phone), 5000);
          }
        }
      });

      sock.ev.on('creds.update', saveCreds);

      // –ñ–¥–µ–º QR –∫–æ–¥
      return new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          reject(new Error('QR code generation timeout'));
        }, 30000);

        sock.ev.on('connection.update', async (update) => {
          if (update.qr) {
            clearTimeout(timeout);
            const qrCode = await qrcode.toDataURL(update.qr);
            resolve({ qrCode, sessionId: sessionFolderName });
          }
        });
      });

    } catch (error) {
      this.logger.error(`Error creating session for ${phone}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
   */
  async connectSession(sessionFolderName: string, phone: string): Promise<boolean> {
    try {
      const authFolder = this.authFolders.get(sessionFolderName) || 
                        path.join(process.cwd(), 'whatsapp_sessions', sessionFolderName);

      if (!fs.existsSync(authFolder)) {
        this.logger.warn(`Auth folder not found for session ${sessionFolderName}`);
        return false;
      }

      const { state, saveCreds } = await useMultiFileAuthState(authFolder);
      this.sessionStates.set(sessionFolderName, { state, saveCreds });

      const sock = makeWASocket({
        printQRInTerminal: false,
        auth: state
      });

      this.sessions.set(sessionFolderName, sock);

      sock.ev.on('connection.update', async (update) => {
        const { connection, lastDisconnect } = update;

        if (connection === 'open') {
          this.logger.log(`WhatsApp session ${sessionFolderName} reconnected successfully`);
        }

        if (connection === 'close') {
          const shouldReconnect = (lastDisconnect?.error as any)?.output?.statusCode !== DisconnectReason.loggedOut;
          if (shouldReconnect) {
            this.logger.log(`Reconnecting session ${sessionFolderName}...`);
            setTimeout(() => this.connectSession(sessionFolderName, phone), 5000);
          }
        }
      });

      sock.ev.on('creds.update', saveCreds);

      return true;
    } catch (error) {
      this.logger.error(`Error connecting session ${sessionFolderName}:`, error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
   */
  async sendMessage(sessionFolderName: string, message: string, phone: string): Promise<boolean> {
    try {
      //get session from folder
      const session = this.sessions.get(sessionFolderName);
      if (!session) {
        throw new Error(`Session ${sessionFolderName} not found`);
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è WhatsApp
      const formattedPhone = this.formatPhoneNumber(phone);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      if (session.user?.id) {
        await session.sendMessage(formattedPhone, { text: message });
        this.logger.log(`Message sent to ${phone} via session ${sessionFolderName}`);
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        await this.incrementDailyCount(sessionFolderName);
        
        return true;
      } else {
        throw new Error('WhatsApp not connected');
      }
    } catch (error) {
      this.logger.error(`Error sending message via session ${sessionFolderName}:`, error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å QR –∫–æ–¥–æ–º (–¥–ª—è –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π)
   */
  async sendMessageWithQR(
    phoneNumber: string,
    message: string,
    ctx: SceneContext
  ): Promise<{ qrCode: string; sessionId: string }> {
    try {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
      const { qrCode, sessionId } = await this.createNewSession(phoneNumber);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR –∫–æ–¥ –≤ Telegram
      await ctx.reply('üîê –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é WhatsApp, –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–≤ QR –∫–æ–¥:');
      await ctx.replyWithPhoto({ source: Buffer.from(qrCode.split(',')[1], 'base64') });
      
      // –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
     
      //save session to db
      await this.saveWhatsappSession(sessionId, phoneNumber);

      return { qrCode, sessionId };
    } catch (error) {
      this.logger.error('Error in sendMessageWithQR:', error);
      throw error;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è WhatsApp
   */
  private formatPhoneNumber(phone: string): string {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    let cleanPhone = phone.replace(/\D/g, '');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!cleanPhone.startsWith('7') && !cleanPhone.startsWith('8')) {
      cleanPhone = '7' + cleanPhone;
    }
    
    // –ó–∞–º–µ–Ω—è–µ–º 8 –Ω–∞ 7
    if (cleanPhone.startsWith('8')) {
      cleanPhone = '7' + cleanPhone.substring(1);
    }
    
    return cleanPhone + '@c.us';
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é WhatsApp –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  async saveWhatsappSession(sessionFolderName: string, phone: string) {
    try {
      return await this.prisma.whatsappUserbots.create({
        data: {
          session: sessionFolderName, // –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–∞–ø–∫–∏ —Å–µ—Å—Å–∏–∏
          phone: phone,
          isBan: false,
          dailyCount: 0,
        },
      });
    } catch (error) {
      this.logger.error('Error saving WhatsApp session:', error);
      throw error;
    }
  }

  /**
   * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private async incrementDailyCount(sessionFolderName: string) {
    try {
      await this.prisma.whatsappUserbots.updateMany({
        where: { session: sessionFolderName },
        data: { dailyCount: { increment: 1 } }
      });
    } catch (error) {
      this.logger.error('Error incrementing daily count:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
   */
  async getSessionStatus(sessionFolderName: string): Promise<{ connected: boolean; phone?: string }> {
    const sock = this.sessions.get(sessionFolderName);
    if (!sock) {
      return { connected: false };
    }

    return {
      connected: !!sock.user?.id,
      phone: sock.user?.id
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
   */
  async getActiveSessions(): Promise<WhatsAppSession[]> {
    try {
      return await this.prisma.whatsappUserbots.findMany({
        where: { isBan: false }
      });
    } catch (error) {
      this.logger.error('Error getting active sessions:', error);
      return [];
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é
   */
  async deleteSession(sessionFolderName: string): Promise<boolean> {
    try {
      const sock = this.sessions.get(sessionFolderName);
      if (sock) {
        await sock.logout();
        this.sessions.delete(sessionFolderName);
      }

      const authFolder = this.authFolders.get(sessionFolderName);
      if (authFolder && fs.existsSync(authFolder)) {
        fs.rmSync(authFolder, { recursive: true, force: true });
        this.authFolders.delete(sessionFolderName);
      }

      await this.prisma.whatsappUserbots.deleteMany({
        where: { session: sessionFolderName }
      });

      this.logger.log(`Session ${sessionFolderName} deleted successfully`);
      return true;
    } catch (error) {
      this.logger.error(`Error deleting session ${sessionFolderName}:`, error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WhatsApp
   */
  async checkConnection(sessionFolderName: string): Promise<boolean> {
    const sock = this.sessions.get(sessionFolderName);
    return !!(sock && sock.user?.id);
  }
}
